apiVersion: batch/v1
kind: CronJob
metadata:
  name: chc-group-inbox
  namespace: risa-v1
spec:
  # Schedule: 40 5 * * * = 5:40 AM IST = 12:10 AM UTC
  schedule: "10 0 * * *"

  # Job history limits
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1

  # Scheduling policies
  startingDeadlineSeconds: 300  # 5 minutes grace period
  concurrencyPolicy: Forbid     # Don't run concurrent jobs

  jobTemplate:
    spec:
      # Job timeout: 60 minutes (RPA scraping can take longer)
      activeDeadlineSeconds: 3600
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccount: ksa-gcp-service-account
          serviceAccountName: ksa-gcp-service-account
          containers:
          - name: chc-group-inbox-container
            image: alpine/curl:8.4.0  # Public image with curl + tools

            command: ["/bin/sh"]
            args:
              - -c
              - |
                #!/bin/sh
                
                # Exit immediately if any command fails
                set -e
                
                echo "Starting chc group inbox scraping job at $(date)"
                echo "Schedule: 5:40 AM IST (12:10 AM UTC) - replacing Cloud Scheduler"
                echo "Using internal auth service: auth-service-service.risa-v1.svc.cluster.local"
                
                # Check required environment variables
                if [ -z "$AUTH_USERNAME" ] || [ -z "$AUTH_PASSWORD" ]; then
                  echo "Error: AUTH_USERNAME and AUTH_PASSWORD environment variables are required."
                  exit 1
                fi
                
                # --- Step 1: Get Authentication Token ---
                echo "Requesting token from internal authentication service..."
                
                # Create authentication payload
                AUTH_PAYLOAD=$(printf '{"username": "%s", "password": "%s"}' "$AUTH_USERNAME" "$AUTH_PASSWORD")
                
                # Install jq if not available
                if ! command -v jq > /dev/null 2>&1; then
                  echo "Installing jq..."
                  apk add --no-cache jq > /dev/null 2>&1
                fi
                
                TOKEN=$(curl -s -X POST \
                  -H "Content-Type: application/json" \
                  -d "$AUTH_PAYLOAD" \
                  "http://auth-service-service.risa-v1.svc.cluster.local/api/v1/user-auth/token" | jq -r .access_token)
                
                # Validate token
                if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
                  echo "Error: Failed to retrieve authentication token from internal service"
                  exit 1
                fi
                
                echo "Successfully retrieved authentication token from http://auth-service-service.risa-v1.svc.cluster.local/api/v1/user-auth/token"
                
                # Direct call to RPA service:
                TARGET_URL="http://rpa-service.risa-v1.svc.cluster.local/rpa-service/v1/rpa/group-inbox"
                TARGET_BODY='{"org_id": "4BlQ4SsqAVTDgFKApKZr"}'
                
                echo "Calling chc RPA group inbox API: $TARGET_URL"
                echo "Organization: chc (4BlQ4SsqAVTDgFKApKZr)"
                
                # Make the API call with Bearer token
                echo "Calling RPA API with 55 minute timeout..."
                RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" --max-time 3300 -X POST \
                  -H "accept: application/json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "Content-Type: application/json" \
                  -H "User-Agent: Kubernetes-CronJob" \
                  -d "$TARGET_BODY" \
                  "$TARGET_URL")
                
                # Parse HTTP status code
                HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
                RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
                
                echo "API Response Status: $HTTP_STATUS"
                
                if [ "$HTTP_STATUS" -eq 200 ]; then
                  echo "Successfully called chc  RPA group inbox API"
                  echo "Response: $RESPONSE_BODY"
                else
                  echo "Error: RPA API call failed with status $HTTP_STATUS"
                  echo "Response: $RESPONSE_BODY"
                  exit 1
                fi
                
                echo "chc group inbox scraping job completed successfully at $(date)"

            # Environment variables from Kubernetes Secret
            env:
            - name: AUTH_USERNAME
              valueFrom:
                secretKeyRef:
                  name: risa-auth-credentials
                  key: USERNAME
            - name: AUTH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: risa-auth-credentials
                  key: PASSWORD

            # Resource limits (RPA operations may need more resources)
            resources:
              limits:
                memory: "256Mi"
                cpu: "200m"
              requests:
                memory: "128Mi"
                cpu: "100m"